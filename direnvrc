#!/usr/bin/env bash
# """Activate the directory environment
#
# SYNOPSIS:
#   source /path/to/activate_direnv
#
# DESCRIPTION:
#   This script can be :
#
#     - Sourced manually, like for python virtual environment, with the
#       following command:
#
#       ```
#       source /path/to/.direnv/activate_direnv
#       ```
#
#     - Sourced automatically by `direnv` using file `.envrc`, see thee
#       description in the header of file `.envrc`.
#
#   Script will parse the file `.envrc.ini`, build associative arrays for each
#   modules described in this file and load corresponding modules.
#
#   Finally, script will unset every temporary variable and methods that are not
#   required once directory environment is loaded to avoid spoiling shell
#   environment.
#
# """

DIRENV_CACHE="${XDG_CACHE_HOME:-${HOME}/.cache}/direnv"

activate_direnv()
{
  # """Activate directory environment by loading modules
  #
  # Check if script is called manuall or using `direnv`, set global variables
  # related to directory environment folder (such as `DIRENV_ROOT`.)
  #
  # Call the method `parse_ini_file` to parse the file `.envrc.ini` to
  # build associative arrays.
  #
  # From these associative arrays, ensure that module have not been modified, if
  # modules have been modified, warn the user and safely exit. Else load
  # corresponding modules.
  #
  # Finally, unset variables and methods not required once directory environment
  # is loaded to avoid spoiling the user shell.
  #
  # Globals:
  #   None
  #
  # Arguments:
  #   None
  #
  # Output:
  #   Log informations
  #
  # Returns:
  #   0 if directory environment is correctly loaded
  #   1 if something when wrong during loading directory environment
  #
  # """

  local DEBUG_LEVEL=${DIRENV_DEBUG_LEVEL}
  source <(curl -s https://framagit.org/-/snippets/7183/raw/main/_log.sh)
  # #   - SC2034: var appears unused, Verify use (or export if used externally)
  # _log()
  # {
  #   # """Print debug message in colors depending on message severity on stderr
  #   #
  #   # Echo colored log depending on user provided message severity. Message
  #   # severity are associated to following color output:
  #   #   - `DEBUG` print in the fifth colors of the terminal (usually magenta)
  #   #   - `INFO` print in the second colors of the terminal (usually green)
  #   #   - `WARNING` print in the third colors of the terminal (usually yellow)
  #   #   - `ERROR` print in the third colors of the terminal (usually red)
  #   # If no message severity is provided, severity will automatically be set to
  #   # INFO.
  #   #
  #   # Arguments:
  #   #   $1: string, message severity or message content
  #   #   $@: string, message content
  #   #
  #   # Output:
  #   #   Log informations colored to stderr (to avoid catching by parent call)
  #   #
  #   # """
  #   _get_level(){
  #     local array=("error" "warning" "info" "debug" "time")
  #     local value=$(echo $1 | tr '[:upper:]' '[:lower:]')

  #     for idx in "${!array[@]}"; do
  #       if [[ "${array[$idx]}" = "${value}" ]]; then
  #         echo "${idx}";
  #         return
  #       fi
  #     done
  #     echo "-1"
  #     return 1
  #   }


  #   # Store color prefixes in variable to ease their use.
  #   declare -A color
  #   # Base on only 8 colors to ensure portability of color when in tty
  #   color["normal"]="\e[0m"     # Normal (usually white fg & transparent bg)
  #   color["bold"]="\e[1m"       # Bold
  #   color["underline"]="\e[4:3m"  # Underline
  #   color["debug"]="\e[34m"   # Fifth term color (usually magenta fg)
  #   color["info"]="\e[32m"    # Second term color (usually green fg)
  #   color["warning"]="\e[33m" # Third term color (usually yellow fg)
  #   color["error"]="\e[31m"   # First term color (usually red fg)


  #   local severity_lower=$(echo "$1" | tr '[:upper:]' '[:lower:]')
  #   local severity_upper=$(echo "$1" | tr '[:lower:]' '[:upper:]')
  #   local prefix="${color["bold"]}${color[$severity_lower]}[${severity_upper}]${color["normal"]}${color[$severity_lower]}"
  #   local color_output="${color[$severity_lower]}"
  #   local msg_level=$(_get_level "${severity_lower}")
  #   local curr_level=$(_get_level "${DIRENV_DEBUG_LEVEL}")
  #   local msg=""

  #   if [[ ${curr_level} -ge ${msg_level} ]]
  #   then
  #     # Concat all remaining arguments in the message content and apply markdown
  #     # like syntax.
  #     # Regex will find all pattern of the form **(string)** or __(string)__ and
  #     # apply formating, respectively bold and underline.
  #     # Note: (string) cannot have output pattern (** or __) in them, this is
  #     # specified by '[^\*\*]' and '[^__]' in group selection.
  #     shift
  #     msg_content=$(echo "$*" | \
  #       sed -r \
  #           -e "s/\*\*([^\*\*]*)\*\*/\\${color["bold"]}\1\\${color["normal"]}\\${color_output}/g" \
  #           -e "s/__([^__].*)__/\\${color["underline"]}\1\\${color["normal"]}\\${color_output}/g" \
  #         )
  #     msg="${prefix} ${msg_content}${color["normal"]}"
  #     # Print message
  #     echo -e "${msg}" 1>&2
  #     return
  #   fi
  #   return
  # }

  get_methods_list()
  {
    # """Parse file passed as argument to export list of methods
    #
    # Parse a file and return the list of "first-level" methods, i.e. methods
    # which name is not idented. For instance, this metod is not a "first-level"
    # method.
    #
    # Globals:
    #   None
    #
    # Arguments:
    #   $1: string, path to the file to parse
    #
    # Output:
    #   Multiline string with all the "first-level" methods, one per line
    #
    # Returns:
    #   0 if file has "first-level" methods
    #   1 if file does not have "first-level" methods
    #
    # """

    local file_path=$1

    grep -E "^[a-zA-Z0-9_]*\(\)" "${file_path}" | cut -d ":" -f 2
  }

  unset_methods()
  {
    # """Unset methods if defined from list of methods provided as arguments
    #
    # Globals:
    #   None
    #
    # Arguments:
    #   $1: multiline string, list of methods to unset, one method per line
    #
    # Output:
    #   None
    #
    # Returns:
    #   0 if file has "first-level" methods
    #   1 if file does not have "first-level" methods
    #
    # """

    local methods_list=$1
    local i_method

    while read -r i_method
    do
      # Remove parenthesis `()` if present in the method name
      i_method=${i_method//\(\)/}
      if command -v "${i_method}" > /dev/null 2>&1
      then
        unset -f "${i_method}"
      fi
    done <<< "${methods_list}"
  }

  unset_modules()
  {
    # """Unset modules from list of already loaded modules
    #
    # The process to unset modules is compose of two part:
    #
    #   - Unset methods defined in the module
    #   - Unset associative array related to this module
    #
    # Globals:
    #   DIRENV_TEMP_FOLDER
    #   DIRENVRC_MODULE_FOLDER
    #
    # Arguments:
    #   None
    #
    # Output:
    #   None
    #
    # Returns:
    #   None
    #
    # """

    local i_module
    local file_list

    if [[ -f "${DIRENV_TEMP_FOLDER}/.loaded_modules" ]]
    then
      while read -r i_module
      do
        if [[ "${i_module}" =~ : ]]
        then
          # Extract module name if there is module sub configuration in
          # `.envrc.ini`, like for `openstack` module.
          # Remove everything after the first `:`.
          i_module=${i_module%:*}
        fi
        file_list="${DIRENVRC_MODULE_FOLDER}/${i_module}.sh"
        unset_methods "$(get_methods_list "${file_list}")"
        # Deallocate module associative array
        unset "${i_module}"
      done <<< "$(cat "${DIRENV_TEMP_FOLDER}/loaded_modules")"
    fi
  }

  unset_all_methods_and_vars()
  {
    # """Unset all methods and variables set to load directory environment
    #
    # The process to unset all methods and variables is composed of two part:
    #
    #   - Unset methods and variables defined by modules
    #   - Unset methods defined by library scripts
    #
    # Globals:
    #   DIRENV_ROOT
    #   DIRENV_LOG_FOLDER
    #   DIRENVRC_SRC_FOLDER
    #   DIRENVRC_SHA1_FOLDER
    #   DIRENVRC_MODULE_FOLDER
    #   DIRENV_TEMP_FOLDER
    #   DIRENV_CONFIG_PATH
    #   DIRENV_INI_SEP
    #
    # Arguments:
    #   None
    #
    # Output:
    #   None
    #
    # Returns:
    #   None
    #
    # """

    local i_file

    unset_modules
    for i_file in "${XDG_CONFIG_HOME:-${HOME}/.config}/direnv/lib/"*.sh \
                  "${XDG_CONFIG_HOME:-${HOME}/.config}/direnv/direnvrc"
    do
      unset_methods "$(get_methods_list "${i_file}")"
    done

    unset DIRENVRC_FOLDER
    unset DIRENVRC_LIB_FOLDER
    unset DIRENVRC_SRC_FOLDER
    unset DIRENVRC_SHA1_FOLDER
    unset DIRENVRC_MODULE_FOLDER
    unset DIRENVRC_TEMPLATE_FOLDER

    unset DIRENV_LOG_FOLDER
    unset DIRENV_TEMP_FOLDER
    unset DIRENV_CONFIG_PATH
    unset DIRENV_INI_SEP
  }

  check_sha1()
  {
    # """Ensure the SHA1 of a file is valid
    #
    # Ensure the SHA1 of a file provided as argument corresponding the value of
    # a previously computed SHA1 to ensure the file has not been modified.
    #
    # Globals:
    #   DIRENV_ROOT
    #
    # Arguments:
    #   $1: string, path to the file to test
    #
    # Output:
    #   Log message to inform user SHA does not correspond to expected value
    #
    # Returns:
    #   0 if SHA1 is valid
    #   1 if SHA1 is not valid
    #
    # """

    local file="$1"
    local sha1_file
    local tmp_file

    if [[ "${file}" =~ .envrc.ini ]]
    then
      local sha1_cache_tree="${DIRENV_ROOT/${HOME}/}"
      sha1_file="${XDG_CACHE_HOME:-${HOME}/.cache}/direnv${DIRENV_ROOT/${HOME}/}/$(basename "${file}" | sed -e "s/^\.//").sha1"
    else
      # Replace every occurrences of `${XDG_CONFIG_HOME:-${HOME}/.config}/direnv` with
      # `${DIRENVRC_SHA1_FOLDER}` in variable `${file}`
      sha1_file="${XDG_CONFIG_HOME:-${HOME}/.config}/direnv/direnv.sha1"
      tmp_file="/tmp/$(uuidgen).sha1"
      cat "${sha1_file}" | sed "s|  |  ${XDG_CONFIG_DIR:-${HOME}/.config}/direnv/|"  > "${tmp_file}"
      sha1_file="${tmp_file}"
    fi

    if ! sha1sum -c "${sha1_file}" &> /dev/null
    then
      # Remove every before the last occurrence of `${DIRENV_ROOT}`
      # - SC2295: Expansion inside ${..} need to be quoted separately, otherwise
      #           they match patterns.
      # shellcheck disable=SC2295
      file=${file/${HOME}/\~}
      # shellcheck disable=SC2295
      file=${file##*${DIRENV_ROOT}\/}
      # Remove every occurrences of `${DIRENV_ROOT`
      # - SC2295: Expansion inside ${..} need to be quoted separately, otherwise
      #           they match patterns.
      # shellcheck disable=SC2295
      sha1_file=${sha1_file/${HOME}/\~}
      # shellcheck disable=SC2295
      sha1_file=${sha1_file##*${XDG_CACHE_HOME:-${HOME}/.cache}/direnv}
      # Not using `direnv_log`, because script may not be loaded at this step.
      _log "ERROR" "SHA1 of **\`${file}\`** differs from **\`${sha1_file}\`**."
      return 1
    fi
  }

  set_direnv()
  {
    # """Set required global variables
    #
    # Check from which binary is called the script, depending on the way, set
    # global variables that will be used by directory environment scripts if
    # main scripts (i.e. `.envrc` and `activate_direnv`) have valid SH1.
    #
    # Globals:
    #   DIRENV_ROOT
    #   DIRENV_LOG_FOLDER
    #   DIRENVRC_SRC_FOLDER
    #   DIRENVRC_SHA1_FOLDER
    #   DIRENV_TEMP_FOLDER
    #   DIRENVRC_MODULE_FOLDER
    #   DIRENV_CONFIG_PATH
    #   DIRENV_INI_SEP
    #
    # Arguments:
    #   None
    #
    # Output:
    #   None
    #
    # Returns:
    #   0 if SHA1 of scripts are valid
    #   1 if SHA1 of scripts are not valid
    #
    # """

    local config_file_name=".envrc.ini"
    local old_direnv_root

    if grep -q "source_up=[Tt]rue" "${PWD}/${config_file_name}"
    then
      old_direnv_root=${PWD}
      source_up
      export DIRENV_ROOT=${old_direnv_root}
      unset old_direnv_root
    fi
    export DIRENV_ROOT="${PWD}"
    export DIRENV_BIN_FOLDER="${DIRENV_CACHE}/bin"
    export DIRENV_CACHE_ROOT="${PWD/${HOME}/${DIRENV_CACHE}}"
    export DIRENV_LOG_FOLDER="${DIRENV_CACHE_ROOT}/log"
    export DIRENV_TEMP_FOLDER="${DIRENV_CACHE_ROOT}/tmp"
    export DIRENV_CONFIG_PATH="${DIRENV_ROOT}/${config_file_name}"
    export DIRENV_INI_SEP="%%%%"

    # Create local only folder
    for i_dir in "${DIRENV_LOG_FOLDER}" \
                 "${DIRENV_BIN_FOLDER}" \
                 "${DIRENV_TEMP_FOLDER}"
    do
      if ! [[ -d ${i_dir} ]]
      then
        _log "INFO" "Create directory ${i_dir//${DIRENV_ROOT}\/}.${e_normal}"
        mkdir -p "${i_dir}"
      fi
    done

    # If user is reloading the directory environment, clean the temporary file
    # listing loaded module to avoid issues when deactivating directory
    # environment
    if [[ -f "${DIRENV_TEMP_FOLDER}/loaded_modules" ]]
    then
      rm -f "${DIRENV_TEMP_FOLDER}/loaded_modules"
    fi
  }

  load_module()
  {
    # """Load specific module
    #
    # Check if module script exists, if not, print an error. Else, check if
    # SHA1 of module script is valid, if not, print an error.
    # If everything is correct, load the module.
    #
    # Globals:
    #   DIRENV_TEMP_FOLDER
    #   DIRENV_MODULE_FOLDER
    #   DIRENV_CONFIG_PATH
    #
    # Arguments:
    #   $1: string, name of the module from `.envrc.ini`
    #
    # Output:
    #   Log message if something went wrong
    #
    # Returns:
    #   0 if module is correctly loaded
    #   1 if module can not be loaded
    #
    # """
    local i_module=$1

    # Extract module name if there is module sub configuration in
    # `.envrc.ini`, like for `openstack` module.
    # Remove everything after the first `:`.
    i_module=${i_module%:*}
    if ! [[ -e "${DIRENVRC_MODULE_FOLDER}/${i_module}.sh" ]]
    then
      _log "ERROR" "Module **${i_module}** does not exists !"
      _log "ERROR" "Please review file **${DIRENV_CONFIG_PATH//${HOME}/\~}** to remove or comment it."
      return 1
    fi
    check_sha1 "${DIRENVRC_MODULE_FOLDER}/${i_module}.sh" || return 1
    # shellcheck source=modules/export_var.sh
    source "${DIRENVRC_MODULE_FOLDER}/${i_module}.sh"
    _log "DEBUG" "Loading module **${i_module}**."
    ${i_module} || error="true"
    if ! [[ -f "${DIRENV_TEMP_FOLDER}/loaded_modules" ]] \
        || ! grep -q "${i_module}" "${DIRENV_TEMP_FOLDER}/loaded_modules"
    then
      echo "${i_module}" >> "${DIRENV_TEMP_FOLDER}/loaded_modules"
    fi
  }

  load_config_file()
  {
    # """Load the configuration file
    #
    # Ensure the configuration file `.envrc.ini` exists. If not print and error
    # and exit. Else ensure that `.envrc.ini has not been modified, if
    # `.envrc.ini` has been modified, print an error and exit.
    # If everything is right, parse the configuration file `.envrc.ini`
    #
    # Globals:
    #   DIRENV_SHA1_FOLDER
    #
    # Arguments:
    #   $1: string, path to the configuration file
    #
    # Output:
    #   Error message if something went wrong
    #
    # Returns:
    #   0 if the configuration file has been loaded.
    #   1 if there is an error with the configuration file.
    #
    # """

    parse_ini_file()
    {
      # """Parse a simple `.ini` file and stre values in associative arrays.
      #
      # Parse line by line a `.ini` file, if a section tag is encountered, create an
      # associative array from the name of the section and store each key, value
      # pair in this associative array.
      #
      # For instances:
      #
      # ```ini
      # [section_name]
      # ##  Comment
      # key_1 = foo
      # key_2 = bar
      # ```
      #
      # Will result on the creation of the bash associative array `${section_name}`
      # with two key,value pair accessible as shown below:
      #
      # ```bash
      # echo ${section_name[key_1]}
      # # Will echo foo
      # echo ${section_name[key_2]}
      # # Will echo bar
      # ```
      #
      # Globals:
      #   DIRENV_INI_SEP
      #
      # Arguments:
      #   $0: string, path to the `.ini` config file to parse
      #
      # Output:
      #   None
      #
      # Returns:
      #   None
      #
      # """

      parse_ini_section()
      {
        # """Parse a simple `.ini` file and stre values in associative arrays.
        #
        # Parse line by line a `.ini` file, if a section tag is encountered, create an
        # associative array from the name of the section and store each key, value
        # pair in this associative array.
        # Space ` ` in section name will be replaced by underscore `_`.
        #
        # For instances:
        #
        # ```ini
        # [section name]
        # ##  Comment
        # key_1 = foo
        # key_2 = bar
        # ```
        #
        # Will result on the creation of the bash associative array `${section_name}`
        # with two key,value pair accessible as shown below:
        #
        # ```bash
        # echo ${section_name[key_1]}
        # ##  Will echo foo
        # echo ${section_name[key_2]}
        # ##  Will echo bar
        # ```
        #
        # Globals:
        #   DIRENV_INI_SEP
        #
        # Arguments:
        #   $0: string, path to the `.ini` config file to parse
        #
        # Output:
        #   None
        #
        # Returns:
        #   None
        #
        # """

        local line="$1"
        local module_name

        module_name="$(echo "${line}" | sed -e "s/\[//g" -e "s/\]//g" -e "s/ /_/g")"
        direnv_modules+=("${module_name}")
      }

      parse_ini_value()
      {
        # """Parse line key, value provided as argument from an `.ini` file
        #
        # Parse a single line provided as first argument from an `.ini`, i.e. of the
        # following form:
        #
        # ```ini
        # ##  This is a comment
        # key=value
        # key =value
        # key= value
        # key = value
        # ```
        #
        # Others form are not supported !
        # Once the line is parse, if value start with `cmd:`, this means that value
        # is obtain from a command provided, execute the command to have the value.
        # store the pair key, value into the associative
        # array corresponding to the section provided as second argument.
        #
        # If there already exist an entry for the key in the associative array, the
        # new value will be concatenate with the old value using `${DIRENV_INI_SEP}`
        # as separator to be able to easily split the string later in the
        # corresponding module.
        #
        # Globals:
        #   DIRENV_INI_SEP
        #
        # Arguments:
        #   $1: string, line to parse
        #   $2: string, name of the module where key, value will be stored
        #
        # Output:
        #   None
        #
        # Returns:
        #   None
        #
        # """
        local line="$1"
        local last_module_name="$2"
        local key
        local value
        local var_access
        local cmd_regexp='^cmd:'

        # Remove space before `=`
        line=${line// =/=}
        # Remove space after `=`
        line=${line//= /=}
        # Remove everything after the first =
        key="${line%=*}"
        # Remove everything before the first =
        value="${line#*=}"

        if [[ "${value}" =~ ${cmd_regexp} ]]
        then
          # Remove first string `cmd:` from the value
          cmd="${value/cmd:[ ]/}"
          value=$(eval ${cmd})
        fi

        if [[ "${last_module_name}" =~ : ]]
        then
          # Remove everything after the ":" in the module name, usefull for storing
          # multiple configuration for a single section, like for openstack module
          # and generate key based on the module configuration
          key="${last_module_name#*:},${key}"
          last_module_name="${last_module_name%:*}"
        fi

        # Check if pair key, val does not already exists
        var_access="echo \"\${${last_module_name}[${key}]}\""
        # shellcheck disable=SC2116
        #   - SC2116: Useless echo ?
        curr_var_value="$(eval "$( echo "${var_access}" )" )"
        if [[ -n "${curr_var_value}" ]]
        then
          value="${curr_var_value}${DIRENV_INI_SEP}${value}"
        fi

        # Store the pair key, value into the corresponding associative array.
        #   - SC2116: Useless echo ?
        # shellcheck disable=SC2116
        eval "$(echo "${last_module_name}[${key}]=\"${value}\"")"
      }

      parse_ini_line()
      {
        # """Determine if a line define a section or a pair key, value
        #
        # Determine if line provided as argument define a section, then call method
        # `parse_ini_section`, else if line determine a pair key, value, call method
        # `parse_ini_value`.
        #
        # Globals:
        #   None
        #
        # Arguments:
        #   $1: string, line to parse
        #   $2: string, name of the last section (i.e. module) parsed
        #
        # Output:
        #   None
        #
        # Returns:
        #   None
        #
        # """
        local line="$1"
        local last_module_name="$2"
        local regexp="^\[.*\]"

        if [[ "${line}" =~ ${regexp} ]]
        then
          parse_ini_section "${line}"
        elif [[ "${line}" =~ [a-zA_Z0_9_]*= ]]
        then
          parse_ini_value "${line}" "${last_module_name}"
        fi
      }

      # Content of the main method
      local filename="$1"
      local last_module_size=0
      local last_module_name=""

      # Unset every possible associative array, i.e. every module array, that
      # could have been initialized when sourcing up direnv.
      for i_module in "${XDG_CONFIG_DIR:-${HOME}/.config}/direnv/modules/"*.sh
      do
        unset "$(basename "${i_module%%.sh}")"
      done

      while read -r line
      do
        # If line is not empty and is not a comment
        if ! [[ "${line}" =~ ^# ]] && [[ -n "${line}" ]]
        then
          parse_ini_line "${line}" "${last_module_name}"

          # If last parsed line define a new module, create corresponding
          # associative array
          if [[ "${#direnv_modules[@]}" -ne "${last_module_size}" ]]
          then
            last_module_size=${#direnv_modules[@]}
            last_module_name=${direnv_modules[-1]}
            # Remove everythin after the first `:`
            declare -A -g "${last_module_name%:*}"
          fi
        fi
      done <<< "$(cat "${filename}")"
    }

    local config_file_path="$1"
    local config_file_sha1="${XDG_CACHE_HOME:-${HOME}/.cache}/direnv${DIRENV_ROOT/${HOME}/}/$(basename "${config_file_path}" | sed -e "s/^\.//").sha1"

    if ! [[ -f "${config_file_path}" ]]
    then
      _log "ERROR" "File **${config_file_path}** does not exists."
      return 1
    fi
    if ! [[ -d "$(dirname ${config_file_sha1})" ]]
    then
      mkdir -p "$(dirname ${config_file_sha1})"
    fi
    if ! [[ -f "${config_file_sha1}" ]]
    then
      sha1sum "${config_file_path}" > "${config_file_sha1}"
    fi
    if ! check_sha1 "${config_file_path}"
    then
      _log "ERROR" "If you modify **${config_file_path/${HOME}/\~}**."
      _log "ERROR" "Please remove **${config_file_sha1/${HOME}/\~}**."
      _log "ERROR" "And reactivate direnv."
      return 1
    fi
    _log "DEBUG" "Loading **${config_file_path//${HOME}/\~}**."
    parse_ini_file "${config_file_path}" || return 1
  }

  deactivate_modules()
  {
    # """Deactivate already module
    #
    # Methods called when initialization of directory environment went wrong.
    # For each already loaded modules, i.e. modules listed in
    # ${DIRENV_TEMP_FOLDER}/.loaded_modules, call the deactivate method of the
    # module.
    # Finally, remove the file ${DIRENV_TEMP_FOLDER}/.loaded_modules.
    #
    # Globals:
    #   DIRENV_MODULE_FOLDER
    #   DIRENV_TEMP_FOLDER
    #
    # Arguments:
    #   $1: string, name of the module from `.envrc.ini`
    #
    # Output:
    #   Log message if something went wrong
    #
    # Returns:
    #   0 if module is correctly loaded
    #   1 if module can not be loaded
    #
    # """
    local loaded_modules="${DIRENV_TEMP_FOLDER}/loaded_modules"

    if [[ -n "$1" ]]
    then
      loaded_modules=$1
    fi

    if [[ -f "${loaded_modules}" ]]
    then
      while read -r i_module
      do
        # shellcheck source=modules/export_var.sh
        source "${DIRENVRC_MODULE_FOLDER}/${i_module}.sh"
        _log "WARNING" "Deactivating module **${i_module}**."
        if command -v "deactivate_${i_module}" &> /dev/null
        then
          deactivate_"${i_module}"
        fi
      done <<< "$(cat "${loaded_modules}")"
      if [[ -z "$1" ]]
      then
        rm -f "${loaded_modules}"
      fi
    fi
  }

  safe_exit()
  {
    # """Safely exit the activation of directory environment in case of error
    #
    # Safely exit the activate of the directory environment if something went
    # wrong during the initilization. This is done by deactivating modules, then
    # unset all methods and variables.
    #
    # Globals:
    #   None
    #
    # Arguments:
    #   None
    #
    # Output:
    #   Log message telling user an error occurs
    #
    # Returns:
    #   1 in any case to indicate an error occurs
    #
    # """
    local config_file_name=".envrc.ini"
    local parent_env

    _log "ERROR" "An error occurs while loading direnv."

    if grep -q "source_up=[Tt]rue" ${config_file_name}
    then
      cd .. || return 1
      parent_env="$(find_up .envrc)"
      parent_env="$(dirname "${parent_env/${HOME}\//}")"
      parent_env="${XDG_CACHE_HOME:-${HOME}/.cache}/direnv/${parent_env}"
      deactivate_modules "${parent_env}/tmp/loaded_modules"
      cd "${DIRENV_ROOT}" || return 1
    fi

    deactivate_modules
    unset_all_methods_and_vars

    return 1
  }

  # Main method content
  local i_module
  local direnv_modules=()
  local error="false"

  local DIRENVRC_SHA1_FOLDER="${XDG_CONFIG_HOME:-${HOME}/.config}/direnv/sha1"
  local DIRENVRC_MODULE_FOLDER="${XDG_CONFIG_HOME:-${HOME}/.config}/direnv/modules"
  #   - SC2034: VAR appears unused
  # shellcheck disable=SC2034
  local DIRENVRC_SRC_FOLDER="${XDG_CONFIG_HOME:-${HOME}/.config}/direnv/src"
  #   - SC2034: VAR appears unused
  # shellcheck disable=SC2034
  local DIRENVRC_TEMPLATE_FOLDER="${XDG_CONFIG_HOME:-${HOME}/.config}/direnv/templates"
  #   - SC2034: VAR appears unused
  # shellcheck disable=SC2034
  local DIRENV_DEBUG_LEVEL="info"

  # Ensure this script has not been modified
  check_sha1 "${XDG_CONFIG_HOME:-${HOME}/.config}/direnv/direnvrc" || return 1

  # Init direnv variables
  set_direnv || return 1

  # Parse configuration file
  if ! load_config_file "${DIRENV_CONFIG_PATH}"
  then
    safe_exit
    return 1
  fi

  # Load every module listed in configuration file
  for i_module in "${direnv_modules[@]}"
  do
    if ! [[ "${i_module}" =~ : ]] && ! [[ "${i_module}" =~ DEFAULT ]]
    then
      load_module "${i_module}" || error="true"
    fi
  done

   # If an error occurs, safely exit
   if [[ "${error}" == "true" ]]
   then
     safe_exit
     return 1
   fi

   # Unset now useless method and variables
   if [[ -z "${old_direnv_root}" ]]
   then
     unset_all_methods_and_vars
   fi

   unset PS1
}

# make `direnv` silent
export DIRENV_LOG_FORMAT=$'\e[32m\e[1m[INFO]\e[0m\e[32m direnv: %s\e[0m '

# ------------------------------------------------------------------------------
# VIM MODELINE
# vim: ft=bash: foldmethod=indent
# ------------------------------------------------------------------------------